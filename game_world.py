import logging, os
from dotenv import load_dotenv
from openai import AsyncOpenAI

# Загружаем переменные из .env
load_dotenv()

# Инициализируем асинхронный клиент OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Включаем логирование
logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Функция для стартовой генерации мира через GPT
async def generate_world_from_gpt(game_year, model="gpt-4o", max_tokens=800):
    try:
        logger.info("Запуск генерации мира...")  # Логируем начало функции
        
        # Определяем формат вывода года
        if game_year < 0:
            formatted_year = f"{abs(game_year)} год до н.э."
        else:
            formatted_year = f"{game_year} год н.э."

        prompt = f"""
        Внутриигровой год: {formatted_year} 

        Сгенерируй новый мир для для {formatted_year} года. Забудь все, о чем мы говорили до этого момента.
        Фокусируйся на этом временном промежутке - погрузи игрока в мир, расскажи о проблемах и вызовах, соответствующие этому времени. 
        Текст должен быть написан в художественном стиле, напоминающем Тарантино или Гая Ричи, с драматургией, но без выхода за рамки реальной физики. 
        Сохраняй историческую правдоподобность, делая мир напряжённым и погружающим, с яркими фразами, чтобы передать атмосферу времени.
        
        Текст должен содержать:
        2. Проблемы и вызовы: социальные, политические, природные — что определяет жизнь людей? Сделай так, чтобы мир был драматичным и ощущался тяжёлым.
        3. Место действия: придумай страну, город, важные локации, как реки, горы или фантастические регионы, но избегай сверхъестественного.
        4. Культурные и религиозные аспекты: мифы, религии, искусство, письменность — как люди воспринимают мир?
        5. Влияние эпохи на людей: как это время изменяет жизнь простых людей? Сделай акцент на трудности, борьбы и изменениях.
        6. Драматургия и напряжённость: создай атмосферу напряжения, драмы, конфликтов, чтобы мир был живым и насыщенным.
        
        Собери в небольшой и динамичный рассказ из нескольких абзацев. Не уходи в излишние детали, но сделай так, чтобы мир казался реальным, напряжённым и наполненным драма-энергией.
        """
        
        # Генерация текста с использованием модели GPT
        response = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.75
        )
        
        logger.info("Ответ от OpenAI по генерации мира получен.")
        
        world_data = response.choices[0].message.content.strip()  # Используем .content для получения текста
        return world_data
    except Exception as e:
        logger.error(f"Ошибка при запросе к OpenAI о генерации мира: {e}")
        return "Произошла ошибка при генерации мира."
    

# Функция для генерации стартовых метрик мира через GPT
async def generate_world_metrics(world_data, model="gpt-4o", max_tokens=1500):
    try:
        logger.info("Запуск генерации метрик для мира...")

        prompt = f"""
        На основе следующего описания мира, сгенерируй метрики для этого мира.

        Описание мира:
        {world_data}

        Пожалуйста, сгенерируй следующие метрики: Экономический рост, Уровень безработицы, Инфляция, Уровень инвестиций, Социальная стабильность, Уровень неравенства, Уровень образования, Уровень преступности, Уровень коррупции, Политическая поддержка, Качество природных ресурсов, Экологическая устойчивость, 
        Технологический прогресс, Наличие научных исследований и инноваций, Уровень военной мощи, Уровень жизни граждан, Уровень здравоохранения, Уровень свободы и прав человека, Уровень международных связей.

        Для каждой метрики укажи её уровень в одной из следующих категорий:
        - Очень низкий
        - Низкий
        - Средний
        - Выше среднего
        - Высокий

        Отдай в формате сплощного абзаца: "Метрика1: Уровень_А, Метрика2: Уровень_Б, ...".
        """

        # Генерация метрик с использованием модели GPT
        response = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.7
        )

        logger.info("Ответ от OpenAI по метрикам получен.")
        
        metrics_data = response.choices[0].message.content.strip()  # Получаем метрики в категориях
        return metrics_data
    except Exception as e:
        logger.error(f"Ошибка при генерации метрик: {e}")
        return "Произошла ошибка при генерации метрик."

# Функция для генерации персонажа через GPT
async def generate_character(world_data, character_details, model="gpt-4o", max_tokens=600):
    try:
        logger.info("Запуск генерации персонажа...")

        prompt = f"""
        На основе следующего описания мира и информации о персонаже, сгенерируй персонажа для игры до 400 символов.

        Описание мира:
        {world_data}

        Детали персонажа:
        {character_details}

        Пожалуйста, создай деталезированное описание персонажа, включая его личные качества, мотивацию и внешний вид в кратком формате текста.
        """

        # Генерация персонажа с использованием модели GPT
        response = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.7
        )

        logger.info("Ответ от OpenAI по генерации персонажа получен.")
        
        character_data = response.choices[0].message.content.strip()  # Получаем описание персонажа
        return character_data
    except Exception as e:
        logger.error(f"Ошибка при генерации персонажа: {e}")
        return "Произошла ошибка при генерации персонажа."
    
# Функция для генерации новостей через GPT
async def generate_world_news(game_year, world_data, world_metrics, model="gpt-4o", max_tokens=6800):
    try:
        logger.info("Запуск генерации новостей...")

        # Определяем формат вывода года
        if game_year < 0:
            formatted_year = f"{abs(game_year)} год до н.э."
        else:
            formatted_year = f"{game_year} год н.э."

        prompt = f"""
        На основе следующего описания мира и метрик сгенерируй дайджест новостей этого мира до 800 символов.

        Описание мира:
        {world_data}

        Метрики мира:
        {world_metrics}

        Внутриигровой год: 
        {formatted_year}

        Пожалуйста, создай дайджест новостей, который описывает текущее состояние мира этого года, включая важные события, изменения и тенденции, которые происходят в нем.
        Стиль повествования новостей должны соответствовать и отрожать достоверно эпоху, в которой они происходят (внутриигровой год) и использовать слова, доступные языку этого времени.
        Представь, что ты - первые разворы популярной газеты для жителей. Твои заголовки пестрят и привлекают внимание. Ты избегаешь скучных формулировок 
        и словосочетаний. Твоя задача -- увлечь читателя и погрузить в круговорот событий -- что происходила вчера, что происходит сегодня и что ждет нас завтра.
        Не используй для форматирования текста **жирный** или _курсив_, так как это не поддерживается в данном формате. Используй капслок для заголовков 
        и кратких выделений.
        
        """

        # Генерация персонажа с использованием модели GPT
        response = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.7
        )

        logger.info("Ответ от OpenAI по генерации новостей получен.")
        
        character_data = response.choices[0].message.content.strip()  # Получаем дайджест новостей
        return character_data
    except Exception as e:
        logger.error(f"Ошибка при генерации новостей: {e}")
        return "Произошла ошибка при генерации новостей."
    
    
# Функция для генерации изменения мира через GPT на основе пользовательских инициатив
async def generate_world_changes(character_description, game_year, world_data, user_initiation, model="gpt-4o", max_tokens=800):
    try:
        logger.info("Запуск генерации изменений мира...")  # Логируем начало функции

        # Определяем формат вывода года
        if game_year < 0:
            formatted_year = f"{abs(game_year)} год до н.э."
        else:
            formatted_year = f"{game_year} год н.э."
        
        prompt = f"""
        Инициатива от пользователя:
        {user_initiation}

        Описание персонажа игрока: {character_description}
        
        Описание мира:
        {world_data}

        Внутриигровой год: 
        {formatted_year}

        Сгенерируй как поменяется мир через 1 год после внесения вот такой инициативы от пользователя. Помни, что изменения должны быть реалистичными и 
        соответствовать следующим законам мира:
        Закон сохранения ресурсов, Закон спроса и предложения, Закон устойчивости экосистем, Закон инерции в социально-политических системах, 
        Закон обратной связи, Закон «побочного эффекта», Закон распределения и неравенства,
        Закон социальной эволюции, Закон ограничения времени, Закон переполнения и перегрузки, Закон человеческой мотивации и психологии, 
        Закон технологической трансформации, Закон энтропии (неизбежность хаоса и распада),
        В мире нет магии, он работает по общепринятым законам физики и химии реального мира.
        
        Попробуй оценить вероятность успеха инициативы на основе описания мира и его текущей ситуации и делай результат инициатив реалистичным, 
        но все еще непредсказуемым. Если пользователь не указывает куда конкретно будут направлены ресурсы -- не додумывай за него и воспринимай инициативу буквально,
        так, как в реальной жизни и работают законы -- топорно, буквально, с поиском дыр и непредсказуемых применениях гражданами.
        Имей ввиду, что у последствий есть предел - вплоть до революции или переворота, если ситуацию не получится исправить пользователю.
        Также, если инициатива выпадает из контекста событий - ты можешь её отклонить по причине нереалистичности или несоответствия законам мира.
        Обязательно учитывай тренд по изменению мира, который ты описывал ранее, и не противоречь ему. Опирайся на него для прогнозирования с большей 
        реалистичностью.
        Если инициативы невозможно внедрить за год -- учитывай это и внедри только реалистичную часть для конкретно вот этой ситуации в мире. Моделируй 
        ситуации на основе исторических данных и предсказаний.

        Оформи текст от первого лица персонажа игрока, вот его описание: {character_description}, чтобы игрок чувствовал себя вовлеченным в процесс изменения мира.
        Пришли текстовое описание новой реальности исходя из инициативы пользователя от лица его персонажа до 600 символов --
        одного из жителей этой страны. Главное дать игроку ощущение, что NPC живут в этом мире и его инициативы влияют на жизнь реальных людей. 
        Используй различные стилистические повествования (можешь говорить в стиле известных персонажей из медиакультуры), чтобы передать эмоции гражданина, 
        можешь даже поделиться какими-то его личными историями. Можешь даже иногда ломать четвертую стену -- общение со своим персонажем в игре для игрока -- главный
        способ познания мира и его механик.
        
        """
        
        # Генерация текста с использованием модели GPT
        response = await client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.75
        )
        
        logger.info("Ответ от OpenAI по генерации нового мира получен.")
        
        world_data = response.choices[0].message.content.strip()  # Используем .content для получения текста
        return world_data
    except Exception as e:
        logger.error(f"Ошибка при запросе к OpenAI о генерации нового мира: {e}")
        return "Произошла ошибка при генерации нового мира."
    