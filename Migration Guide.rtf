{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 .SFNS-Regular_wdth_opsz120000_GRAD_wght2580000;\f2\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;
\f3\fnil\fcharset0 HelveticaNeue-Italic;\f4\fnil\fcharset0 .SFNS-Regular_wdth_opsz110000_GRAD_wght2580000;\f5\fnil\fcharset0 .SFNS-Regular_wdth_opsz110000_GRAD_wght1F40000;
}
{\colortbl;\red255\green255\blue255;\red236\green244\blue251;\red12\green14\blue18;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c94118\c96471\c98824;\cssrgb\c5098\c6667\c9020;\cssrgb\c0\c0\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs64 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 v1.0.0 Migration Guide\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 We have released a new major version of our SDK, and we recommend upgrading promptly.\
It's a total rewrite of the library, so many things have changed, but we've made upgrading easy with a code migration script and detailed docs below. It was extensively\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/openai/openai-python/discussions/631"}}{\fldrslt \ul beta tested}}\'a0prior to release.\
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf2 Getting started\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs23\fsmilli11900 \cf2 pip install --upgrade openai\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf2 \cb3 What's changed\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b0\fs28 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Auto-retry with backoff if there's an error\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Proper types (for mypy/pyright/editors)\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can now instantiate a client, instead of using a global default.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Switch to explicit client instantiation\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Weights and Biases CLI will now be included in their own package\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf2 \cb3 Migration guide\
\pard\pardeftab720\partightenfactor0

\f3\i\b0\fs28 \cf2 For Azure OpenAI users, see\'a0{\field{\*\fldinst{HYPERLINK "https://aka.ms/oai/v1-python-migration"}}{\fldrslt \ul Microsoft's Azure-specific migration guide}}.
\f0\i0 \
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 Automatic migration with grit\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 You can automatically migrate your codebase using\'a0{\field{\*\fldinst{HYPERLINK "https://grit.io/"}}{\fldrslt \ul grit}}, either\'a0{\field{\*\fldinst{HYPERLINK "https://app.grit.io/migrations/new/openai"}}{\fldrslt \ul online}}\'a0or with the following CLI command on Mac or Linux:\
\pard\pardeftab720\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 openai migrate\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The grit binary executes entirely locally with AST-based transforms.\
Be sure to audit its changes: we suggest ensuring you have a clean working tree beforehand, and running\'a0
\f2\fs23\fsmilli11900 git add --patch
\f0\fs28 \'a0afterwards. Note that grit.io also offers opt-in automatic fixes powered by AI.\
\pard\pardeftab720\partightenfactor0

\f4\b \cf2 Automatic migration with grit on Windows\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 To use grit to migrate your code on Windows, you will need to use Windows Subsystem for Linux (WSL).\'a0{\field{\*\fldinst{HYPERLINK "https://learn.microsoft.com/en-us/windows/wsl/install"}}{\fldrslt \ul Installing WSL}}\'a0is quick and easy, and you do not need to keep using Linux once the command is done.\
Here's a step-by-step guide for setting up and using WSL for this purpose:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Open a PowerShell or Command Prompt as an administrator and run\'a0
\f2\fs23\fsmilli11900 wsl --install
\f0\fs28 .\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Restart your computer.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Open the WSL application.\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In the WSL terminal,\'a0
\f2\fs23\fsmilli11900 cd
\f0\fs28 \'a0into the appropriate directory (e.g.,\'a0
\f2\fs23\fsmilli11900 cd /mnt/c/Users/Myself/my/code/
\f0\fs28 ) and then run the following commands:
\f2\fs23\fsmilli11900 curl -fsSL https://docs.grit.io/install | bash\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 grit install\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 grit apply openai\cb1 \uc0\u8232 
\f0\fs28 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Then, you can close WSL and go back to using Windows.\
\pard\pardeftab720\partightenfactor0

\f4\b \cf2 Automatic migration with grit in Jupyter Notebooks\
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf2 If your Jupyter notebooks are not in source control, they will be more difficult to migrate. You may want to copy each cell into grit's web interface, and paste the output back in.\
If you need to migrate in a way that preserves use of the module-level client instead of instantiated clients, you can use\'a0{\field{\*\fldinst{HYPERLINK "https://app.grit.io/migrations/new/openai_global"}}{\fldrslt \ul the openai_global grit migration}}\'a0instead.\
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 Initialization\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs23\fsmilli11900 \cf2 # old\
import openai\
\
openai.api_key = os.environ['OPENAI_API_KEY']\
\
# new\
from openai import OpenAI\
\
client = OpenAI(\
  api_key=os.environ['OPENAI_API_KEY'],  # this is also the default, it can be omitted\
)\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 \cb3 Responses\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 Response objects are now\'a0{\field{\*\fldinst{HYPERLINK "https://docs.pydantic.dev/latest/usage/models/"}}{\fldrslt \ul pydantic models}}\'a0and no longer conform to the dictionary shape. However you can easily convert them to a dictionary with\'a0
\f2\fs23\fsmilli11900 model.model_dump()
\f0\fs28 .\
\pard\pardeftab720\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 # before\
import json\
import openai\
\
completion = openai.Completion.create(model='curie')\
print(completion['choices'][0]['text'])\
print(completion.get('usage'))\
print(json.dumps(completion, indent=2))\
\
# after\
from openai import OpenAI\
\
client = OpenAI()\
\
completion = client.completions.create(model='curie')\
print(completion.choices[0].text)\
print(dict(completion).get('usage'))\
print(completion.model_dump_json(indent=2))\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 \cb3 Async client\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 We do not support calling asynchronous methods in the module-level client, instead you will have to instantiate an async client.\
The rest of the API is exactly the same as the synchronous client.\
\pard\pardeftab720\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 # old\
import openai\
\
completion = openai.ChatCompletion.acreate(model="gpt-3.5-turbo", messages=[\{"role": "user", "content": "Hello world"\}])\
\
# new\
from openai import AsyncOpenAI\
\
client = AsyncOpenAI()\
completion = await client.chat.completions.create(model="gpt-3.5-turbo", messages=[\{"role": "user", "content": "Hello world"\}])\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 \cb3 Module client\
\pard\pardeftab720\partightenfactor0

\f5\b0\fs28 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Important
\f0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 We highly recommend instantiating client instances instead of relying on the global client.\cb1 \
\cb3 We also expose a global client instance that is accessible in a similar fashion to versions prior to v1.\
\pard\pardeftab720\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 import openai\
\
# optional; defaults to `os.environ['OPENAI_API_KEY']`\
openai.api_key = '...'\
\
# all client options can be configured just like the `OpenAI` instantiation counterpart\
openai.base_url = "https://..."\
openai.default_headers = \{"x-foo": "true"\}\
\
completion = openai.chat.completions.create(\
    model="gpt-4",\
    messages=[\
        \{\
            "role": "user",\
            "content": "How do I output all files in a directory using Python?",\
        \},\
    ],\
)\
print(completion.choices[0].message.content)\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The API is the exact same as the standard client instance based API.\
This is intended to be used within REPLs or notebooks for faster iteration,\'a0
\f4\b not
\f0\b0 \'a0in application code.\
We recommend that you always instantiate a client (e.g., with\'a0
\f2\fs23\fsmilli11900 client = OpenAI()
\f0\fs28 ) in application code because:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It can be difficult to reason about where client options are configured\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It's not possible to change certain client options without potentially causing race conditions\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It's harder to mock for testing purposes\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 It's not possible to control cleanup of network connections\cb1 \
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 \cb3 Pagination\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 All\'a0
\f2\fs23\fsmilli11900 list()
\f0\fs28 \'a0methods that support pagination in the API now support automatic iteration, for example:\
\pard\pardeftab720\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 from openai import OpenAI\
\
client = OpenAI()\
\
for job in client.fine_tuning.jobs.list(limit=1):\
    print(job)\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Previously you would have to explicitly call a\'a0
\f2\fs23\fsmilli11900 .auto_paging_iter()
\f0\fs28 \'a0method instead.\cb1 \uc0\u8232 \cb3 See the{\field{\*\fldinst{HYPERLINK "https://github.com/openai/openai-python/tree/main/README.md"}}{\fldrslt \ul \'a0README}}\'a0for more details.\
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 Azure OpenAI\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 To use this library with\'a0{\field{\*\fldinst{HYPERLINK "https://learn.microsoft.com/en-us/azure/ai-services/openai/overview"}}{\fldrslt \ul Azure OpenAI}}, use the\'a0
\f2\fs23\fsmilli11900 AzureOpenAI
\f0\fs28 \'a0class instead of the\'a0
\f2\fs23\fsmilli11900 OpenAI
\f0\fs28 \'a0class.\
A more comprehensive\'a0{\field{\*\fldinst{HYPERLINK "https://aka.ms/oai/v1-python-migration"}}{\fldrslt \ul Azure-specific migration guide is available on the Microsoft website}}.\
\pard\pardeftab720\partightenfactor0

\f5 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Important
\f0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 The Azure API shape differs from the core API shape which means that the static types for responses / params\cb1 \uc0\u8232 \cb3 won't always be correct.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs23\fsmilli11900 \cf2 \cb3 from openai import AzureOpenAI\
\
# gets the API Key from environment variable AZURE_OPENAI_API_KEY\
client = AzureOpenAI(\
    # https://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versioning\
    api_version="2023-07-01-preview",\
    # https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal#create-a-resource\
    azure_endpoint="https://example-endpoint.openai.azure.com",\
)\
\
completion = client.chat.completions.create(\
    model="deployment-name",  # e.g. gpt-35-instant\
    messages=[\
        \{\
            "role": "user",\
            "content": "How do I output all files in a directory using Python?",\
        \},\
    ],\
)\
print(completion.model_dump_json(indent=2))\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 In addition to the options provided in the base\'a0
\f2\fs23\fsmilli11900 OpenAI
\f0\fs28 \'a0client, the following options are provided:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f2\fs23\fsmilli11900 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 azure_endpoint
\f0\fs28 \cb1 \
\ls4\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 azure_deployment
\f0\fs28 \cb1 \
\ls4\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 api_version
\f0\fs28 \cb1 \
\ls4\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 azure_ad_token
\f0\fs28 \cb1 \
\ls4\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 azure_ad_token_provider
\f0\fs28 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 An example of using the client with Azure Active Directory can be found\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/openai/openai-python/tree/main/examples/azure_ad.py"}}{\fldrslt \ul here}}.\
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 All name changes\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf0 \strokec4 Note: all\'a0
\f2\fs23\fsmilli11900 a*
\f0\fs28 \'a0methods have been removed; the\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/openai/openai-python/discussions/742#async-client"}}{\fldrslt \ul async client}}\'a0must be used instead.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.api_base
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 openai.base_url
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.proxy
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 openai.proxies
\f0\fs28 \'a0({\field{\*\fldinst{HYPERLINK "https://www.python-httpx.org/compatibility/#proxy-keys"}}{\fldrslt \ul docs}})\cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.InvalidRequestError
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 openai.BadRequestError
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Audio.transcribe()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.audio.transcriptions.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Audio.translate()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.audio.translations.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.ChatCompletion.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.chat.completions.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Completion.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.completions.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Edit.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.edits.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Embedding.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.embeddings.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.File.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.files.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.File.list()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.files.list()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.File.retrieve()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.files.retrieve()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.File.download()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.files.retrieve_content()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.cancel()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.cancel()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.list()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.list()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.list_events()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.list_events()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.stream_events()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.list_events(stream=True)
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.retrieve()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.retrieve()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.delete()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.delete()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTune.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tunes.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTuningJob.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tuning.jobs.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTuningJob.cancel()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tuning.jobs.cancel()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTuningJob.delete()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tuning.jobs.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTuningJob.retrieve()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tuning.jobs.retrieve()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTuningJob.list()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tuning.jobs.list()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.FineTuningJob.list_events()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.fine_tuning.jobs.list_events()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Image.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.images.generate()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Image.create_variation()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.images.create_variation()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Image.create_edit()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.images.edit()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Model.list()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.models.list()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Model.delete()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.models.delete()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Model.retrieve()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.models.retrieve()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Moderation.create()
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 client.moderations.create()
\f0\fs28 \cb1 \
\ls5\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.api_resources
\f0\fs28 \'a0->\'a0
\f2\fs23\fsmilli11900 openai.resources
\f0\fs28 \cb1 \
\pard\pardeftab720\partightenfactor0

\f4\b\fs30 \cf2 \cb3 Removed\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f2\b0\fs23\fsmilli11900 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.api_key_path
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.app_info
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.debug
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.log
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.OpenAIError
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Audio.transcribe_raw()
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Audio.translate_raw()
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.ErrorObject
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Customer
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.api_version
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.verify_ssl_certs
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.api_type
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.enable_telemetry
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.ca_bundle_path
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.requestssession
\f0\fs28 \'a0(we now use\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/encode/httpx"}}{\fldrslt \ul httpx}})\cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.aiosession
\f0\fs28 \'a0(we now use\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/encode/httpx"}}{\fldrslt \ul httpx}})\cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Deployment
\f0\fs28 \'a0(only used for Azure) \'96 please use the\'a0{\field{\*\fldinst{HYPERLINK "https://pypi.org/project/azure-mgmt-cognitiveservices"}}{\fldrslt \ul azure-mgmt-cognitiveservices}}\'a0client library instead (here's\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/cognitiveservices/azure-mgmt-cognitiveservices/generated_samples/list_deployments.py"}}{\fldrslt \ul how to list deployments}}, for example).\cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.Engine
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.File.find_matching_files()
\f0\fs28 \cb1 \
\ls6\ilvl0
\f2\fs23\fsmilli11900 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 openai.embeddings_utils
\f0\fs28 \'a0(now in the cookbook)\cb1 \
}